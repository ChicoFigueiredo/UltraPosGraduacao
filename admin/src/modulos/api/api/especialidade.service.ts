/**
 * Receita Digital
 * Definição da API da Receita Digital 
 *
 * OpenAPI spec version: 1.0.6
 * Contact: fran.fig@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Especialidade } from '../model/especialidade';
import { PaginationEspecialidade } from '../model/paginationEspecialidade';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EspecialidadeService {

    protected basePath = 'http://localhost:8080/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Exclui o especialidade da base
     * 
     * @param especialidadeID ID do especialidade a ser consultado (CNPJ ou id objeto)
     * @param apiKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEspecialidadeById(especialidadeID: string, apiKey?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteEspecialidadeById(especialidadeID: string, apiKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEspecialidadeById(especialidadeID: string, apiKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEspecialidadeById(especialidadeID: string, apiKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (especialidadeID === null || especialidadeID === undefined) {
            throw new Error('Required parameter especialidadeID was null or undefined when calling deleteEspecialidadeById.');
        }

        let headers = this.defaultHeaders;
        if (apiKey !== undefined && apiKey !== null) {
            headers = headers.set('api_key', String(apiKey));
        }

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/especialidade/${encodeURIComponent(String(especialidadeID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Listagem de especialidades
     * Emite uma listagem de especialidades (CBO) do profissional médico
     * @param descricao Nome ou parte da descricao do especialidade, slug ou e-mail
     * @param id busca especialidade pelo id do especialidade
     * @param itemsPerPage Quantidade de registros por página
     * @param page Página (baseada em itemsPerPage)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEspecialidade(descricao?: string, id?: string, itemsPerPage?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<PaginationEspecialidade>;
    public getEspecialidade(descricao?: string, id?: string, itemsPerPage?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationEspecialidade>>;
    public getEspecialidade(descricao?: string, id?: string, itemsPerPage?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationEspecialidade>>;
    public getEspecialidade(descricao?: string, id?: string, itemsPerPage?: number, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (descricao !== undefined) {
            queryParameters = queryParameters.set('descricao', <any>descricao);
        }
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (itemsPerPage !== undefined) {
            queryParameters = queryParameters.set('itemsPerPage', <any>itemsPerPage);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PaginationEspecialidade>(`${this.basePath}/especialidade`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Encontra o especialidade pelo ID
     * Retorna um único especialidade
     * @param especialidadeID ID do especialidade a ser consultado (slug, cpf ou id objeto)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEspecialidadeById(especialidadeID: string, observe?: 'body', reportProgress?: boolean): Observable<Especialidade>;
    public getEspecialidadeById(especialidadeID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Especialidade>>;
    public getEspecialidadeById(especialidadeID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Especialidade>>;
    public getEspecialidadeById(especialidadeID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (especialidadeID === null || especialidadeID === undefined) {
            throw new Error('Required parameter especialidadeID was null or undefined when calling getEspecialidadeById.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Especialidade>(`${this.basePath}/especialidade/${encodeURIComponent(String(especialidadeID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Listagem de especialidades para combo
     * Emite uma listagem de especialidades (CBO) do profissional médico
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEspecialidadeCombo(observe?: 'body', reportProgress?: boolean): Observable<Array<Especialidade>>;
    public getEspecialidadeCombo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Especialidade>>>;
    public getEspecialidadeCombo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Especialidade>>>;
    public getEspecialidadeCombo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Especialidade>>(`${this.basePath}/especialidade/combo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Insere ou atualiza uma nova especialidade na base
     * 
     * @param body O objeto JSON do especialidade a ser inserido
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postEspecialidade(body: Especialidade, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postEspecialidade(body: Especialidade, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postEspecialidade(body: Especialidade, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postEspecialidade(body: Especialidade, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postEspecialidade.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/especialidade`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Insere ou atualiza um especialidade na base
     * 
     * @param especialidadeID ID do especialidade a ser consultado (CNPJ ou id objeto)
     * @param body O objeto JSON do especialidade a ser atualizado
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postEspecialidadeById(especialidadeID: string, body: Especialidade, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postEspecialidadeById(especialidadeID: string, body: Especialidade, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postEspecialidadeById(especialidadeID: string, body: Especialidade, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postEspecialidadeById(especialidadeID: string, body: Especialidade, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (especialidadeID === null || especialidadeID === undefined) {
            throw new Error('Required parameter especialidadeID was null or undefined when calling postEspecialidadeById.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postEspecialidadeById.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/especialidade/${encodeURIComponent(String(especialidadeID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Atualiza um especialidade da base
     * 
     * @param body O objeto JSON do especialidade a ser atualizado
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEspecialidade(body: Especialidade, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putEspecialidade(body: Especialidade, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putEspecialidade(body: Especialidade, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putEspecialidade(body: Especialidade, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putEspecialidade.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/especialidade`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
