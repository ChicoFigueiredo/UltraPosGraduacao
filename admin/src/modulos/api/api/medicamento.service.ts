/**
 * Receita Digital
 * Definição da API da Receita Digital 
 *
 * OpenAPI spec version: 1.0.6
 * Contact: fran.fig@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiResponse } from '../model/apiResponse';
import { Medicamento } from '../model/medicamento';
import { PaginationMedicamento } from '../model/paginationMedicamento';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MedicamentoService {

    protected basePath = 'http://localhost:8080/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Exclui o medicamento da base
     * 
     * @param medicamentoID ID do medicamento a ser consultado (CNPJ ou id objeto)
     * @param apiKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMedicamentoById(medicamentoID: string, apiKey?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteMedicamentoById(medicamentoID: string, apiKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteMedicamentoById(medicamentoID: string, apiKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteMedicamentoById(medicamentoID: string, apiKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (medicamentoID === null || medicamentoID === undefined) {
            throw new Error('Required parameter medicamentoID was null or undefined when calling deleteMedicamentoById.');
        }

        let headers = this.defaultHeaders;
        if (apiKey !== undefined && apiKey !== null) {
            headers = headers.set('api_key', String(apiKey));
        }

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/medicamento/${encodeURIComponent(String(medicamentoID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Listagem de medicamentos
     * Emite uma listagem de medicamentos por busca de atributo, se nenhum parametro de busca for preenchido
     * @param cnpj busca medicamento pelo CNPJ da fabricante
     * @param nome Nome ou parte do nome do medicamento
     * @param id busca medicamento pelo id do medicamento
     * @param itemsPerPage Quantidade de registros por página
     * @param page Página (baseada em itemsPerPage)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMedicamento(cnpj?: string, nome?: string, id?: string, itemsPerPage?: string, page?: number, observe?: 'body', reportProgress?: boolean): Observable<PaginationMedicamento>;
    public getMedicamento(cnpj?: string, nome?: string, id?: string, itemsPerPage?: string, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationMedicamento>>;
    public getMedicamento(cnpj?: string, nome?: string, id?: string, itemsPerPage?: string, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationMedicamento>>;
    public getMedicamento(cnpj?: string, nome?: string, id?: string, itemsPerPage?: string, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cnpj !== undefined) {
            queryParameters = queryParameters.set('cnpj', <any>cnpj);
        }
        if (nome !== undefined) {
            queryParameters = queryParameters.set('nome', <any>nome);
        }
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (itemsPerPage !== undefined) {
            queryParameters = queryParameters.set('itemsPerPage', <any>itemsPerPage);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PaginationMedicamento>(`${this.basePath}/medicamento`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Encontra o medicamento pelo ID
     * Retorna um único medicamento
     * @param medicamentoID ID do medicamento a ser consultado (CNPJ ou id objeto)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMedicamentoById(medicamentoID: string, observe?: 'body', reportProgress?: boolean): Observable<Medicamento>;
    public getMedicamentoById(medicamentoID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Medicamento>>;
    public getMedicamentoById(medicamentoID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Medicamento>>;
    public getMedicamentoById(medicamentoID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (medicamentoID === null || medicamentoID === undefined) {
            throw new Error('Required parameter medicamentoID was null or undefined when calling getMedicamentoById.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Medicamento>(`${this.basePath}/medicamento/${encodeURIComponent(String(medicamentoID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Listagem de medicamentos
     * Emite uma listagem de medicamentos por nome do produto ou principio ativo, a ser usada em campos de busca de medicamento
     * @param q Nome ou parte do nome ou principio ativo do medicamento
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMedicamentoCombo(q?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Medicamento>>;
    public getMedicamentoCombo(q?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Medicamento>>>;
    public getMedicamentoCombo(q?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Medicamento>>>;
    public getMedicamentoCombo(q?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined) {
            queryParameters = queryParameters.set('q', <any>q);
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Medicamento>>(`${this.basePath}/medicamento/combo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Insere um novo medicamento na base
     * 
     * @param body O objeto JSON do medicamento a ser inserido
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postMedicamento(body: Medicamento, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postMedicamento(body: Medicamento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postMedicamento(body: Medicamento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postMedicamento(body: Medicamento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postMedicamento.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/medicamento`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Atualiza um medicamento na base
     * 
     * @param medicamentoID ID do medicamento a ser consultado (CNPJ ou id objeto)
     * @param body O objeto JSON do medicamento a ser atualizado
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postMedicamentoById(medicamentoID: string, body: Medicamento, observe?: 'body', reportProgress?: boolean): Observable<Medicamento>;
    public postMedicamentoById(medicamentoID: string, body: Medicamento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Medicamento>>;
    public postMedicamentoById(medicamentoID: string, body: Medicamento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Medicamento>>;
    public postMedicamentoById(medicamentoID: string, body: Medicamento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (medicamentoID === null || medicamentoID === undefined) {
            throw new Error('Required parameter medicamentoID was null or undefined when calling postMedicamentoById.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postMedicamentoById.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Medicamento>(`${this.basePath}/medicamento/${encodeURIComponent(String(medicamentoID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * upload de foto do medicamento
     * 
     * @param medicamentoID ID do medicamento a ser consultado (CNPJ ou id objeto)
     * @param additionalMetadata Metadados Adicionais
     * @param file arquivo contendo a foto do medicamento
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postMedicamentoByIdUploadimagens(medicamentoID: string, additionalMetadata?: string, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public postMedicamentoByIdUploadimagens(medicamentoID: string, additionalMetadata?: string, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public postMedicamentoByIdUploadimagens(medicamentoID: string, additionalMetadata?: string, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public postMedicamentoByIdUploadimagens(medicamentoID: string, additionalMetadata?: string, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (medicamentoID === null || medicamentoID === undefined) {
            throw new Error('Required parameter medicamentoID was null or undefined when calling postMedicamentoByIdUploadimagens.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (additionalMetadata !== undefined) {
            formParams = formParams.append('additionalMetadata', <any>additionalMetadata) || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<ApiResponse>(`${this.basePath}/medicamento/${encodeURIComponent(String(medicamentoID))}/uploadimagens`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Atualiza um medicamento da base
     * 
     * @param body O objeto JSON do medicamento a ser atualizado
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putMedicamento(body: Medicamento, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putMedicamento(body: Medicamento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putMedicamento(body: Medicamento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putMedicamento(body: Medicamento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putMedicamento.');
        }

        let headers = this.defaultHeaders;

        // authentication (receitadigital_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/medicamento`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
