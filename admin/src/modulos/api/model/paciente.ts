/**
 * Receita Digital
 * Definição da API da Receita Digital 
 *
 * OpenAPI spec version: 1.0.6
 * Contact: fran.fig@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { DocumentoIdentidade } from './documentoIdentidade';
import { Endereco } from './endereco';
import { PacienteDadosMedicos } from './pacienteDadosMedicos';
import { PacienteFiliacao } from './pacienteFiliacao';
import { PacienteRepresentantesLegais } from './pacienteRepresentantesLegais';


export interface Paciente {
    /**
     * Código único do paciente do sistema
     */
    id?: string;
    /**
     * Código CPF do paciente
     */
    cpf: string;
    /**
     * Nome do médico
     */
    nome: string;
    /**
     * Celular principal do médico, será usado para validar ou assinar receitas
     */
    celular: string;
    /**
     * e-mail principal do médico, será usado para validações e informes
     */
    email: string;
    /**
     * Data de nascimento do médico
     */
    nascimento?: string;
    identidade?: DocumentoIdentidade;
    /**
     * string MD5 com a senha do cliente para acesso (aceito apenas de alguns ip/sites)
     */
    senha?: string;
    /**
     * Sexo biológico do paciente
     */
    sexo?: Paciente.SexoEnum;
    filiacao?: PacienteFiliacao;
    /**
     * Estado Civil do Paciente
     */
    estadoCivil?: Paciente.EstadoCivilEnum;
    /**
     * Raça / Cor / Etnia do Paciente
     */
    etnia?: Paciente.EtniaEnum;
    /**
     * Profissão do Paciente (usar a tabela de profissões, mas sem 'fechar' nas alternativas)
     */
    escolaridade?: Paciente.EscolaridadeEnum;
    /**
     * Profissão do Paciente (usar a tabela de profissões, mas sem 'fechar' nas alternativas)
     */
    profissao?: string;
    endereco?: Endereco;
    dadosMedicos?: PacienteDadosMedicos;
    /**
     * Em caso de paciente menor ou incapaz, adicionar representantes legais
     */
    representantesLegais?: Array<PacienteRepresentantesLegais>;
    /**
     * ID único do usuário
     */
    user?: string;
    /**
     * string base64 contendo a foto do médico
     */
    foto?: string;
}
export namespace Paciente {
    export type SexoEnum = 'Masculino' | 'Feminino';
    export const SexoEnum = {
        Masculino: 'Masculino' as SexoEnum,
        Feminino: 'Feminino' as SexoEnum
    }
    export type EstadoCivilEnum = 'Solteiro(a)' | 'Casado(a)' | 'União estável' | 'Divorciado(a)' | 'Viúvo(a)' | 'Separado(a)';
    export const EstadoCivilEnum = {
        SolteiroA: 'Solteiro(a)' as EstadoCivilEnum,
        CasadoA: 'Casado(a)' as EstadoCivilEnum,
        UnioEstvel: 'União estável' as EstadoCivilEnum,
        DivorciadoA: 'Divorciado(a)' as EstadoCivilEnum,
        VivoA: 'Viúvo(a)' as EstadoCivilEnum,
        SeparadoA: 'Separado(a)' as EstadoCivilEnum
    }
    export type EtniaEnum = 'Branco(a)' | 'Preto(a)' | 'Pardo(a)' | 'Mulato(a)' | 'Amarelo(a)' | 'Indígeno(a)' | 'Não Sei' | 'Não quero declarar';
    export const EtniaEnum = {
        BrancoA: 'Branco(a)' as EtniaEnum,
        PretoA: 'Preto(a)' as EtniaEnum,
        PardoA: 'Pardo(a)' as EtniaEnum,
        MulatoA: 'Mulato(a)' as EtniaEnum,
        AmareloA: 'Amarelo(a)' as EtniaEnum,
        IndgenoA: 'Indígeno(a)' as EtniaEnum,
        NoSei: 'Não Sei' as EtniaEnum,
        NoQueroDeclarar: 'Não quero declarar' as EtniaEnum
    }
    export type EscolaridadeEnum = 'Fundamental - Incompleto' | 'Fundamental - Completo' | 'Médio - Incompleto' | 'Médio - Completo' | 'Superior - Incompleto' | 'Superior - Completo' | 'Pós-graduação - Incompleto' | 'Pós-graduação - Completo' | 'Mestrado - Incompleto' | 'Mestrado - Completo' | 'Doutorado - Incompleto' | 'Doutorado - Completo';
    export const EscolaridadeEnum = {
        FundamentalIncompleto: 'Fundamental - Incompleto' as EscolaridadeEnum,
        FundamentalCompleto: 'Fundamental - Completo' as EscolaridadeEnum,
        MdioIncompleto: 'Médio - Incompleto' as EscolaridadeEnum,
        MdioCompleto: 'Médio - Completo' as EscolaridadeEnum,
        SuperiorIncompleto: 'Superior - Incompleto' as EscolaridadeEnum,
        SuperiorCompleto: 'Superior - Completo' as EscolaridadeEnum,
        PsGraduaoIncompleto: 'Pós-graduação - Incompleto' as EscolaridadeEnum,
        PsGraduaoCompleto: 'Pós-graduação - Completo' as EscolaridadeEnum,
        MestradoIncompleto: 'Mestrado - Incompleto' as EscolaridadeEnum,
        MestradoCompleto: 'Mestrado - Completo' as EscolaridadeEnum,
        DoutoradoIncompleto: 'Doutorado - Incompleto' as EscolaridadeEnum,
        DoutoradoCompleto: 'Doutorado - Completo' as EscolaridadeEnum
    }
}
